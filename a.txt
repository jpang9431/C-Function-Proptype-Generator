int rand_lim(int limit) {
    int divisor = RAND_MAX / (limit + 1);
    int retval;
    do {
        retval = rand() / divisor;
    } while (retval > limit);

    return retval;
}

struct Card generateCard() {
    struct Card returnCard = {.name = rand_lim(SIZEOF(names)),
                              .suit = rand_lim(SIZEOF(suits))};
    return returnCard;
}

void printCard(struct Card* card) {
    printf("%c of %s\n", card->name, suits[card->suit]);
}

void printHand(struct Card hand[maxBlackJackHand], int handSize) {
    for (int i = 0; i < handSize; i++) {
        printCard(&hand[i]);
    }
}

int calcBlackJackHandValue(int handMap[]) {
    int handValue = 0;
    for (int i = 1; i < blackJackHandMapSize; i++) {
        handValue = handValue + handMap[i] * (i + 1);
    }
    if (handValue < 11 && handMap[0] < 2) {
        handValue = handValue + handMap[0] * 11;
    } else {
        handValue = handValue + handMap[0];
    }
    return handValue;
}

int getCardIndex(char cardName) {
    int num = (int)cardName - (int)'0';
    if (num > 0 && num < 10) {
        return num - 1;
    } else if (cardName == 'A') {
        return 0;
    } else {
        return blackJackHandMapSize - 1;
    }
}

int playBlackJack(int bet) {
    struct Card dealerHand[maxBlackJackHand];
    struct Card playerHand[maxBlackJackHand];
    int dealerHandMap[blackJackHandMapSize] = {0};
    int playerHandMap[blackJackHandMapSize] = {0};
    int dealerHandSize = 2;
    int playerHandSize = 2;
    for (int i = 0; i < 2; i++) {
        dealerHand[i] = generateCard();
        playerHand[i] = generateCard();
        dealerHandMap[getCardIndex(dealerHand[i].name)]++;
        playerHandMap[getCardIndex(playerHand[i].name)]++;
    }
    int countinue = 1;
    printf("Dealer Hand (%d):\n", calcBlackJackHandValue(dealerHandMap));
    printHand(dealerHand, dealerHandSize);
    printf("Your hand (%d):\n", calcBlackJackHandValue(playerHandMap));
    printHand(playerHand, playerHandSize);
}

void printList(int nums[]) {
    for (int i = 0; i < blackJackHandMapSize; i++) {
        printf("%d,", nums[i]);
    }
    printf("\n");
}

void testing() {
    /*for (int i = 0; i < 10; i++) {
        struct Card card = generateCard();
        printCard(&card);
        printf("%d\n", getCardIndex(card.name));
    }*/
    // playBlackJack(0);
    /*int testingHand[blackJackHandMapSize] = {0};
    printList(testingHand);
    printf("%d\n",calcBlackJackHandValue(testingHand));
    testingHand[0] = 1;
    printList(testingHand);
    printf("%d\n",calcBlackJackHandValue(testingHand));
    testingHand[0] = 2;
    printList(testingHand);
    printf("%d\n",calcBlackJackHandValue(testingHand));
    testingHand[blackJackHandMapSize-1] = 1;
    printList(testingHand);
    printf("%d\n",calcBlackJackHandValue(testingHand));*/
}



void print(int a, int b) {
    
}